<?xml version="1.0" encoding="UTF-8"?>

<project name="build_custom_template" default="">

    <!-- 导入本地编译的参数build_local_path文件 -->
    <import file="build_local_path_template.xml"/>

    <!-- TODO : 这里要要配置local编译的签名参数（DB的证书参数不要改动，直接从DB服务器获取）-->
<!--    <condition property="key.store" value="${env.KEYSTORE_PATH}" else="debug.keystore">
        <isset property="env.KEYSTORE_PATH"/>
    </condition>
    <condition property="key.alias" value="${env.ALIAS}" else="androiddebugkey">
        <isset property="env.ALIAS"/>
    </condition>
    <condition property="key.store.password" value="${env.STOREPASS}" else="android">
        <isset property="env.STOREPASS"/>
    </condition>
    <condition property="key.alias.password" value="${env.KEYPASS}" else="android">
        <isset property="env.KEYPASS"/>
    </condition>  -->
    
    <property name="key.store" value="debug.keystore"/>
    <property name="key.alias" value="androiddebugkey"/>
    <property name="key.store.password" value="android"/>
    <property name="key.alias.password" value="android"/>
    
    <!-- TODO : 这里要要配置编译版本的QUA头信息，用于标示当前版本的QUA -->
    <property name="publish.build.AppSnVer" value="${MajorVersion}${MinorVersion}"/>
    <property name="publish.build.AppSnPublishType" value="DD"/>
    <property name="publish.build.AppSnFlg" value="${publish.build.AppSnHead}${publish.build.AppSnVer}_${publish.build.AppSnPublishType}"/>
    <!-- <property name="publish.build.AppVnDay" value="${output.file.build.date}"/> -->
    <property name="publish.build.AppBnBuildNo" value="${BuildNo}"/>
    <property name="publish.build.AppLc" value="A1B2C3000D4E5F6"/>
    <property name="publish.build.AppLcid" value="99"/>

    <!-- TODO :设置proguard混淆描述文件（修改location的文件名） -->
	<property name="proguard.config" location="proguard-project.txt"/>
	<!--     <property name="proguard.config" location="proguard.cfg"/> -->

    <!-- TODO :设置每个项目的输出apk的first name, 例如相册是gallery; 联系人是contacts -->
    <property name="output.file.build.first.name" value="TwsPluginWallet"/>
	

    <!--
    ********************************************************************************
    ********************** 根据各个app的要求，自己修改的task ***********************
    ********************************************************************************
-->

    <!-- .
        在build前删除或者替换字符串或者资源文件，需要配置这个task。
        如果无需替换任何资源，则无需配置，清空这个task中的内容即可。
        (example：替换LC和代码里面的静态变量)
    -->
    <target name="-set-custom-pre-build">
        <echo level="info" message="按照项目要求，更改编译前的输出参数 ..." encoding="UTF-8"/>

        <!-- example: 如果是DB上编译，ant编译时就替换assets/build_config.ini配置文件中的信息(参数根据项目需要来修改) -->
        
    </target>

	<target name="-plugin_verify">
		<echo level="info" message="into -plugin_verify" encoding="UTF-8"/>
	     <available file="assets/plugin/Plugin.xml" property="plugin.configFile.exist" />
		<echo level="info" message="plugin.configFile.exist:${plugin.configFile.exist}"></echo> 
		 <if condition="${plugin.configFile.exist}">
		 	<then>
		 		<echo level="info" message="包含Plugin.xml" encoding="UTF-8"/> 
		 	</then>
		 	<else>
		 		<echo level="error" message="can't find assets/plugin/Plugin.xml in your project" encoding="UTF-8"/>
		 		<fail message="can't find assets/plugin/Plugin.xml in your project"/>
		 	</else>
		 </if>
	</target>
    <!--
         在project中有引用第三方jar，需要配置这个task。
         引用的第三方jar文件，也分为“依赖包”和“扩展的编译环境”两大类，这需要分开配置。

         custom.intermediate.jars.path: 是指所用到的“扩展的编译环境”的隐藏api的jars的path集合
         custom.dex.injars.path: 是指需要打包到dex中的所有jars的path集合
         custom.dex.libraryjars.path: 是指只会参加编译、混淆，但是不会打包到dex中的所有jars的path集合

         （注：对于基础控件framework-qrom.jar和隐藏api的jar，因为和rom以及UI资源是强相关的，更新不及时就可能运行时crash
               对比于qrom_component_log.jar这种公共jar, 基础控件framework-qrom.jar需要和rom完全匹配 ）
               因此对于基础控件framework-qrom.jar和隐藏api的jar，最好不存放在libs文件夹下。
               但无论在本地开发，还是在DB服务器上，都存在于单独的路径，需要独立更新。
               所以这种情况下，就需要为它配置第三方jar的路径，让build脚本能够把它引用进来）
               在集成模式中，framework-qrom.jar需要打进dex中，所以配置到custom.dex.injars.path中
               在非集成模式中，framework-qrom.jar不要打进dex中，所以配置到custom.dex.libraryjars.path中
     -->

    <target name="-set-compile-libs">
        <echo> into -set-compile-libs</echo>
        <echo>设置项目中引用的隐藏api的libs路径(这些属于编译时用到的特殊jar) ...</echo>
        <path id="custom.intermediate.jars.path">
        </path>

        <echo>设置项目中引用的第三方libs路径 ...</echo>
        <if condition="${build.release.mode.internal}">
            <then>
                <path id="custom.dex.injars.path">
                    <fileset dir="libs">
                        <include name="*.jar"/>
                        <exclude name="framework-qrom.jar"/>
                    </fileset>
                    <fileset dir="${sdk.dir}/tools/support">   
              			<include name="*.jar"/>
          			</fileset>
                </path>
                <path id="custom.dex.libraryjars.path">  
                    <fileset dir="linklib"> <!-- gordonbi 参与编译 但不打入 -->
                        <include name="*.jar"/>
                    </fileset>                  
                </path>
            </then>
            <else>
                <path id="custom.dex.injars.path">
                    <fileset dir="libs">
                        <include name="*.jar"/>
                        <exclude name="framework-qrom.jar"/>
                    </fileset>
                    <fileset dir="${sdk.dir}/tools/support">   
              			<include name="*.jar"/>
          			</fileset>
                </path>
                <path id="custom.dex.libraryjars.path">
                    <fileset dir="linklib"> <!-- gordonbi 参与编译 但不打入 -->
                        <include name="*.jar"/>
                    </fileset> 
                </path>
            </else>
        </if>
    </target>
    <!--********************************************* example: <target name="-set-compile-libs"> *************************************************

       # 下面这个是另外一个的实现“-set-compile-libs”的例子，我们用filemanager这个project来举例说明如何配置
        # 注： filemanager在libs文件夹下面也放了控件的framework-qrom.jar，但是DB脚本编译的时候，不会使用framework-qrom.jar
               而使用sdk库下面的framework-qrom.jar文件，所以会把framework-qrom.jar从libs引用排除

        <target name="-set-compile-libs">
            <echo >设置项目中引用的隐藏api的libs路径(这些属于编译时用到的特殊jar) ...</echo>
            <path id="custom.intermediate.jars.path">
            </path>

            <echo>设置项目中引用的第三方libs路径 ...</echo>
            <if condition="${build.release.mode.internal}">
                <then>
                    <path id="custom.dex.injars.path">
                        <fileset dir="libs">
                            <include name="*.jar"/>
                            <exclude name="framework-qrom.jar"/>
                        </fileset>
                    </path>
                    <path id="custom.dex.libraryjars.path">
                        <pathelement location="${qrom.widget.sdk.file}"/>
                    </path>
                </then>
                <else>
                    <path id="custom.dex.injars.path">
                        <fileset dir="libs">
                            <include name="*.jar"/>
                            <exclude name="framework-qrom.jar"/>
                        </fileset>
                        <pathelement location="${qrom.widget.sdk.file}"/>
                    </path>
                    <path id="custom.dex.libraryjars.path">
                    </path>
                </else>
            </if>
        </target>
    -->



    <!--********************************************* example: <target name="-set-compile-libs"> *************************************************

        # 下面这个是另外一个的实现“-set-compile-libs”的例子，我们用contacts这个project来举例说明如何配置
        # 注：1. contacts和普通应用相似点：都是引用libs下的jar包，和控件jar包
              2. contacts和普通应用差异点：需要引用额外的隐藏api的jar包
              3. contacts在开发的时候，使用了libs隐藏api下的jar包，但是可能和服务器上sdk库中的jar版本不一致
                 所以在DB脚本编译的时候，不指定使用libs下面的jar，而使用sdk库下面的jar文件

        <condition property="qrom.intermediates.sdk.android-common" value="${env.QROMSDK}/QromWidgetTools/framework-qrom.jar"
               else="${qrom.sdk.git.local.dir}/qrom_intermediates_sdk/android-common-classes-full-debug.jar">
            <os family="unix"/>
        </condition>
        <condition property="qrom.intermediates.sdk.contacts-classes" value="${env.QROMSDK}/QromWidgetTools/framework-qrom.jar"
                   else="${qrom.sdk.git.local.dir}/qrom_intermediates_sdk/contacts-classes-full-debug.jar">
            <os family="unix"/>
        </condition>
        <condition property="qrom.intermediates.sdk.guava" value="${env.QROMSDK}/QromWidgetTools/framework-qrom.jar"
                   else="${qrom.sdk.git.local.dir}/qrom_intermediates_sdk/guava.jar">
            <os family="unix"/>
        </condition>
        <condition property="qrom.intermediates.sdk.phone-common" value="${env.QROMSDK}/QromWidgetTools/framework-qrom.jar"
                   else="${qrom.sdk.git.local.dir}/qrom_intermediates_sdk/phone-common-classes-full-debug.jar">
            <os family="unix"/>
        </condition>
        <condition property="qrom.intermediates.sdk.telephony-classes" value="${env.QROMSDK}/QromWidgetTools/framework-qrom.jar"
                   else="${qrom.sdk.git.local.dir}/qrom_intermediates_sdk/telephony-classes-full-debug.jar">
            <os family="unix"/>
        </condition>
        <condition property="qrom.intermediates.sdk.framework-base" value="${env.QROMSDK}/QromWidgetTools/framework-qrom.jar"
                   else="${qrom.sdk.git.local.dir}/qrom_intermediates_sdk/framework-base.jar">
            <os family="unix"/>
        </condition>

        <target name="-set-compile-libs">
            <echo >设置项目中引用的隐藏api的libs路径(这些属于编译时用到的特殊jar) ...</echo>
            <path id="custom.intermediate.jars.path">
                <pathelement location="${qrom.intermediates.sdk.android-common}"/>
                <pathelement location="${qrom.intermediates.sdk.contacts-classes}"/>
                <pathelement location="${qrom.intermediates.sdk.guava}"/>
                <pathelement location="${qrom.intermediates.sdk.phone-common}"/>
                <pathelement location="${qrom.intermediates.sdk.telephony-classes}"/>
                <pathelement location="${qrom.intermediates.sdk.framework-base}"/>
            </path>

            <echo>设置项目中引用的第三方libs路径 ...</echo>
            <if condition="${build.release.mode.internal}">
                <then>
                    <path id="custom.dex.injars.path">
                        <pathelement location="libs/android-support-v13.jar"/>
                        <pathelement location="libs/pinyin4j-2.5.0.jar"/>
                        <pathelement location="libs/contacts-security-sdk.jar"/>
                    </path>
                    <path id="custom.dex.libraryjars.path">
                        <pathelement location="${qrom.widget.sdk.file}"/>
                    </path>
                </then>
                <else>
                    <path id="custom.dex.injars.path">
                        <pathelement location="libs/android-support-v13.jar"/>
                        <pathelement location="libs/pinyin4j-2.5.0.jar"/>
                        <pathelement location="libs/contacts-security-sdk.jar"/>
                        <pathelement location="${qrom.widget.sdk.file}"/>
                    </path>
                    <path id="custom.dex.libraryjars.path">
                    </path>
                </else>
            </if>
        </target>

     -->

</project>
