<?xml version="1.0" encoding="UTF-8"?>

<project name="build_common_template" basedir=".">

    <!--
        ********************************************************************************
        ******************************** 设置编译参数 **********************************
        ********************************************************************************
    -->

    <!-- 系统属性，请不要擅自修改 -->
    <property environment="env"/>
    
    <!-- 如果是本地，设置value的值 -->
	<condition property="MajorVersion" value="${env.MajorVersion}">
		<istrue value="${isCI}"/>
	</condition>
	<condition property="MinorVersion" value="${env.MinorVersion}">
		<istrue value="${isCI}"/>
	</condition>
	<condition property="FixVersion" value="${env.FixVersion}">
		<istrue value="${isCI}"/>
	</condition>
	<condition property="BuildNo" value="${env.BuildNo}">
		<istrue value="${isCI}"/>
	</condition>
	<condition property="PLATFORM" value="${env.PLATFORM}">
		<istrue value="${isCI}"/>
	</condition>
	
    <!-- 导入app的自定义task文件 -->
    <import file="build_custom_template.xml"/>

    <!-- 预置android sdk中自带的默认build文件中所需的参数 -->
    <condition property="sdk.dir" value="${env.ANDROIDSDK_LINUX_R21}" else="${sdk.local.dir}">
        <!-- 是否服务器构建（一般本地编译为window环境，DB编译为linux环境） -->
        <os family="unix"/>
    </condition>
 <!-- 
    <condition property="qrom.widget.sdk.file" value="${env.QROM_SDK_BASE_PATH}/qrom_widget_sdk/QromWidgetTools/framework-qrom.jar"
               else="${qrom.sdk.git.local.dir}/qrom_widget_sdk/QromWidgetTools/framework-qrom.jar">
        <os family="unix"/>
    </condition>
    <condition property="qrom.widget.res.dir" value="${env.QROM_SDK_BASE_PATH}/qrom_widget_sdk/QromWidgetTools/qrom-res"
               else="${qrom.sdk.git.local.dir}/qrom_widget_sdk/QromWidgetTools/qrom-res">
        <os family="unix"/>
    </condition>
    <condition property="qrom.widget.property.file" value="${env.QROM_SDK_BASE_PATH}/qrom_widget_sdk/QromWidgetTools/qrom.properties"
               else="${qrom.sdk.git.local.dir}/qrom_widget_sdk/QromWidgetTools/qrom.properties">
        <os family="unix"/>
    </condition>
-->
    <!-- 导入android sdk中自带的默认build文件 -->
    <import file="${sdk.dir}/tools/ant/build.xml"/>

    <!-- 导入工程描述文件 -->
    <property file="project.properties"/>

    <!--
        按照规范，指定输出的文件名
        (如果是非DB环境编译，会记录COMPUTERNAME，方便回溯版本)
    -->
    <tstamp>
        <format property="output.file.build.date" pattern="yyMMdd"/>
    </tstamp>
    <tstamp>
        <format property="output.file.build.manifest.date" pattern="yyMMdd"/>
    </tstamp>
    <property name="androidmanifest.versionCode" value="android:versionCode=&quot;${output.file.build.manifest.date}&quot;"/>
    <property name="androidmanifest.versionName" value="android:versionName=&quot;${output.file.build.manifest.date}.${BuildNo}&quot;"/>
    <condition property="env.all.params.available" value="true" else="false">
        <and>
            <isset property="MajorVersion"/>
            <isset property="MinorVersion"/>
            <isset property="FixVersion"/>
            <isset property="BuildNo"/>
            <isset property="PLATFORM"/>
        </and>
    </condition>
    <condition
            property="output.file.build.basename"
            value="${output.file.build.first.name}_${output.file.build.date}.${BuildNo}"
            else="${output.file.build.first.name}_${env.COMPUTERNAME}_${output.file.build.date}">
        <istrue value="${env.all.params.available}"/>
    </condition>

    <path id="original.target.class.path"/>
    <path id="original.all.jars.path"/>
    <path id="custom.dex.injars.path"/>
    <path id="custom.dex.libraryjars.path"/>
    <path id="custom.intermediate.jars.path"/>

    <!--
        ********************************************************************************
        ************************* build脚本的base模本（start） *************************
        ***************************** (通用方法，谨慎修改) *****************************
        ********************************************************************************
    -->

    <target name="build_release_implement" depends="-set-internal-mode">
        <echo>build.release.mode.internal = ${build.release.mode.internal}</echo>
        <replaceregexp file="AndroidManifest.xml"
            match="android:debuggable\s*=\s*&quot;([^&quot;]*)&quot;"
            replace="android:debuggable=&quot;false&quot;" byline="false" encoding="utf-8"/>
        <antcall target="release"/>
    </target>

    <target name="build_debug_implement" depends="-set-internal-mode">
        <echo>build.release.mode.internal = ${build.release.mode.internal}</echo>
        <replaceregexp file="AndroidManifest.xml"
                       match="android:debuggable\s*=\s*&quot;([^&quot;]*)&quot;"
                       replace="android:debuggable=&quot;true&quot;" byline="false" encoding="utf-8"/>
        <antcall target="debug"/>
    </target>

    <target name="-set-internal-mode">
        <echo>env.QROM_SDK_BASE_PATH = ${env.QROM_SDK_BASE_PATH}</echo>
        <echo>env.ROM_INTEGRATION = ${env.ROM_INTEGRATION}</echo>
        <condition property="build.release.mode.internal" value="true" else="false">
<!--             <or> -->
<!--                 <and> -->
<!--                     <isset property="env.QROM_SDK_BASE_PATH"/> -->
<!--                     <istrue value="${env.ROM_INTEGRATION}"/> -->
<!--                 </and> -->
                <istrue value="${build_internal}"/>
<!--             </or> -->
        </condition>
    </target>

    <target name="-pre-build">
        <echo> into -pre-build</echo>
        <!-- 动态设置qrom.properties的参数 -->
       <!--   <copy file="${qrom.widget.property.file}" tofile="qrom.properties" overwrite="true"/>  
        <replaceregexp file="qrom.properties" match="qrom_lib_path\s*=.*" encoding="utf-8"
                       replace="qrom_lib_path = ${qrom.widget.res.dir}" byline="true"/>
        <if condition="${build.release.mode.internal}">
            <then>
                <replaceregexp file="qrom.properties" match="include_qrom_res\s*=.*" encoding="utf-8"
                               replace="include_qrom_res = 0" byline="true"/>
            </then>
            <else>
                <replaceregexp file="qrom.properties" match="include_qrom_res\s*=.*" encoding="utf-8"
                               replace="include_qrom_res = 1" byline="true"/>
            </else>
        </if>
         -->
        <!-- 如果是app的内置模式，要先单独把so打包出来 -->
        <if condition="${build.release.mode.internal}">
            <then>
<!--                 <zip destfile="${out.absolute.dir}/${output.file.build.basename}_so.zip" update="true"> -->
<!--                     <fileset dir="${jar.libs.dir}"> -->
<!--                         <include name="**/*.so"/> -->
<!--                     </fileset> -->
<!--                 </zip> -->
<!--                 <delete includeemptydirs="true" dir="${jar.libs.dir}" excludes="**/*.jar"/> -->
                     <delete includeemptydirs="true" dir="${jar.libs.dir}" excludes="*.jar"/>
                     <delete includeemptydirs="true" dir="TencentWearServiceLibApp/libs" excludes="*.jar"/>
                     <delete includeemptydirs="true" dir="twswidgetlib/twsWearableSupportLib/libs" excludes="*.jar"/>
            </then>
        </if>

        <antcall target="-set-standard-pre-build" inheritAll="true" inheritRefs="true"/>
        <antcall target="-set-custom-pre-build" inheritAll="true" inheritRefs="true"/>
    </target>

    <target name="-set-standard-pre-build">
        <!--******************** base模板不修改（start） ********************-->

        <!-- 如果是DB上编译，配置了env的环境变量，ant编译时就按照标准修改versionName和versionCode -->
        <if condition="${env.all.params.available}">
            <then>
                <replaceregexp file="AndroidManifest.xml"
                               match="android:versionCode\s*=\s*&quot;([^&quot;]*)&quot;"
                               replace="${androidmanifest.versionCode}"
                               byline="false" encoding="utf-8"/>
                <replaceregexp file="AndroidManifest.xml"
                               match="android:versionName\s*=\s*&quot;(.*)&quot;"
                               replace="${androidmanifest.versionName}"
                               byline="false" encoding="utf-8"/>
            </then>
        </if>

        <!--******************** base模板不修改（start） ********************-->
    </target>

    <target name="-pre-compile" depends="-set-original-path,-set-compile-libs">
        <!--******************** base模板不修改（start） ********************-->
        <path id="project.all.jars.path">
            <path path="${toString:custom.dex.injars.path}"/>
        </path>
        <echo>injars:${toString:custom.dex.injars.path}</echo>
        <echo>injars:${toString:custom.dex.libraryjars.path}</echo>
        <path id="project.target.class.path">
            <path path="${toString:custom.intermediate.jars.path}"/>
            <path refid="custom.dex.libraryjars.path"/>
            <path path="${toString:original.target.class.path}"/>
        </path>
        <!--******************** base模板不修改（end） ********************-->
    </target>

    <target name="-set-original-path">
        <path id="original.target.class.path">
            <path path="${toString:project.target.class.path}"/>
        </path>
        <path id="original.all.jars.path">
            <path path="${toString:project.all.jars.path}"/>
        </path>
    </target>

    <!--
      *  implement task name="-post-compile"
         (在这个task任务的依赖中，可以配置obfuscate的应用jar)
      -->
    <target name="-post-compile">
        <if condition="${build.release.mode.internal}">
            <then>
                <delete includeemptydirs="true" dir="${out.classes.absolute.dir}"
                        includes="**/com/tencent/qrom/R*.class"/>
            </then>
        </if>
    </target>

    <target name="-post-build">
        <!--******************** base模板不修改（start） ********************-->
        <echo>按照命名规范，对输出的apk进行重命名 ...</echo>
        <echo>${output.file.build.basename}</echo>
        <echo>${androidmanifest.versionCode}</echo>
        <echo>${androidmanifest.versionName}</echo>
        <condition property="out.final.build.release.mode" value="internal" else="normal">
            <istrue value="${build.release.mode.internal}"/>
        </condition>
        <if condition="${proguard.enabled}">
            <then>
                <move file="${out.final.file}"
                      tofile="${out.absolute.dir}/${output.file.build.basename}_release_${out.final.build.release.mode}.apk"/>
                <move file="${obfuscate.absolute.dir}/mapping.txt"
                      tofile="${out.absolute.dir}/${output.file.build.basename}_mapping_${out.final.build.release.mode}.txt"/>
            </then>
            <else>
                <move file="${out.final.file}"
                      tofile="${out.absolute.dir}/${output.file.build.basename}_debug_${out.final.build.release.mode}.apk"/>
            </else>
        </if>

        <echo>删除多余的文件 ...</echo>
        <delete includeemptydirs="true" dir="${out.absolute.dir}"
                excludes="**/${output.file.build.basename}*/** ${output.file.build.basename}*"/> 
        <!--******************** base模板不修改（end） ********************-->
    </target>

    <!--
        ********************************************************************************
        ************************** build脚本的base模本（end） **************************
        ***************************** (通用方法，谨慎修改) *****************************
        ********************************************************************************
    -->


</project>
